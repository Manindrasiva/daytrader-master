# Maven

# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
  name: Azure Pipelines
  demands: maven


steps:

#- task: Maven@3
#  displayName: 'Maven pom.xml'
#  inputs:
#    mavenPomFile: 'day-trader-java-app/pom.xml'
#
#- task: MavenAuthenticate@0
#  inputs:
#    artifactsFeeds: 'daytrader2'
#
##- task: Maven@3
##  inputs:
##    mavenPomFile: 'day-trader-java-app/pom.xml'
##    goals: 'deploy'
##    publishJUnitResults: false
##    javaHomeOption: 'JDKVersion'
##    mavenVersionOption: 'Default'
##    mavenAuthenticateFeed: false
##    effectivePomSkip: false
##    sonarQubeRunAnalysis: false
#
#- task: CopyFiles@2
#  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
#  inputs:
#    SourceFolder: '$(system.defaultworkingdirectory)'
#    Contents: '**/*.war'
#    TargetFolder: '$(build.artifactstagingdirectory)'
#  condition: succeededOrFailed()
#
#
#- task: PublishBuildArtifacts@1
#  displayName: 'Publish Artifact: drop'
#  inputs:
#    PathtoPublish: '$(build.artifactstagingdirectory)'
#  condition: succeededOrFailed()
#
#- task: Docker@2
#  displayName: 'daytrader-accounts'
#  inputs:
#    containerRegistry: 'Azure-Puneet'
#    repository: 'daytrader-accounts'
#    tags: '15'
#    command: 'buildAndPush'
#    Dockerfile: 'day-trader-java-app/daytrader-example-accountsrepo/daytrader-accountsapp/daytrader-accounts/Dockerfile'
#
#- task: Docker@2
#  displayName: 'daytrader-gateway'
#  inputs:
#    containerRegistry: 'Azure-Puneet'
#    repository: 'daytrader-gateway'
#    tags: '15'
#    command: 'buildAndPush'
#    Dockerfile: 'day-trader-java-app/daytrader-example-gatewayrepo/daytrader-gatewayapp/daytrader-gateway/Dockerfile'
#
#
#- task: Docker@2
#  displayName: 'daytrader-portfolios'
#  inputs:
#    containerRegistry: 'Azure-Puneet'
#    repository: 'daytrader-portfolios'
#    tags: '15'
#    command: 'buildAndPush'
#    Dockerfile: 'day-trader-java-app/daytrader-example-portfoliosrepo/daytrader-portfoliosapp/daytrader-portfolios/Dockerfile'
#
#- task: Docker@2
#  displayName: 'daytrader-quotes'
#  inputs:
#    containerRegistry: 'Azure-Puneet'
#    repository: 'daytrader-quotes'
#    tags: '15'
#    command: 'buildAndPush'
#    Dockerfile: 'day-trader-java-app/daytrader-example-quotesrepo/daytrader-quotesapp/daytrader-quotes/Dockerfile'
#
#- task: Docker@2
#  displayName: 'daytrader-web'
#  inputs:
#    containerRegistry: 'Azure-Puneet'
#    repository: 'daytrader-web'
#    tags: '15'
#    command: 'buildAndPush'
#    Dockerfile: 'day-trader-java-app/daytrader-example-webrepo/daytrader-webapp/daytrader-web/Dockerfile'
#
- task: Kubernetes@1
  displayName: 'daytrader-accounts-deployment-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/accounts/deployment.yaml'
    secretType: 'dockerRegistry'

- task: Kubernetes@1
  displayName: 'daytrader-accounts-service-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/accounts/service.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-gateway-deployment-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/gateway/deployment.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-gateway-service-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/gateway/service.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-portfolios-deployment-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/portfolios/deployment.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-portfolios-service-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/portfolios/service.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-quotes-deployment-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/quotes/deployment.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-quotes-service-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/quotes/service.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-web-deployment-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/web/deployment.yaml'

- task: Kubernetes@1
  displayName: 'daytrader-web-service-k8s'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/web/service.yaml'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'apply'
    arguments: '-f kubernetes-manifests/ingress/ingress.yaml'
    secretType: 'dockerRegistry'

- task: DownloadSecureFile@1
  name: fullchain
  inputs:
    secureFile: 'fullchain.pem'

- task: DownloadSecureFile@1
  name: privkey
  inputs:
    secureFile: 'privkey.pem'

- task: CmdLine@2
  inputs:
    script: 'cat $(privkey.secureFilePath) $(fullchain.secureFilePath)'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'daytrader-cluster-srv-conn'
    command: 'create'
    arguments: 'secret tls daytrader-tls-secret --key $(privkey.secureFilePath) --cert $(fullchain.secureFilePath)'
    secretType: 'dockerRegistry'

#- task: Bash@3
#  inputs:
#    filePath: 'day-trader-java-app/daytrader-postman-testing/test_all.sh'
#    workingDirectory: 'day-trader-java-app/daytrader-postman-testing/'
#    failOnStderr: true

#- task: PublishTestResults@2
#  inputs:
#    testResultsFormat: 'JUnit'
#    testResultsFiles: 'day-trader-java-app/daytrader-postman-testing/**.xml'
#    mergeTestResults: true
