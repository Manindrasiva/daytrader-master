# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
- name: Repo_Var # name of the parameter; required
  type: number # data type of the parameter; required
  default: 0

trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
## Updating the python version available on the linux agent
#- task: UsePythonVersion@0
#  inputs:
#    versionSpec: '3.x'
#    architecture: 'x64'
#
## Updating pip to latest
#- script: python -m pip install --upgrade pip
#  displayName: 'Upgrade pip'
#
## Updating to latest Azure CLI version.
#- script: pip install --pre azure-cli --extra-index-url https://azurecliprod.blob.core.windows.net/edge
#  displayName: 'upgrade azure cli'
#
#- script: az --version
#  displayName: 'Show Azure CLI version'
#
#- script: az extension add -n azure-devops
#  displayName: 'Install Azure DevOps Extension'
#
#- script: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
#  env:
#    AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
#  displayName: 'Login Azure DevOps Extension'
#
#- script: az devops configure --defaults organization=https://dev.azure.com/{OrganizationName} project="GXEnablement" --use-git-aliases true
#  displayName: 'Set default Azure DevOps organization and project'
#
#- script: |
#    az pipelines build list
#    az pipelines run --branch master --name "30.2 Docker compose with Postman" -p GXEnablement
##    git pr list
#  displayName: 'Show build list and run'
#    if [ ${Repo_Name} -eq TfsGit ]

- script: |
    if [[ "$Repo_Name" == "TfsGit" ]]
    then
    ${{ parameters.Repo_Var }} = 1
    elif [[ "$Repo_Name" == "GitHub"]]
    then
    ${{ parameters.Repo_Var }} = 2
    fi
  env:
    Repo_Name: $(Build.Repository.Provider)
  displayName: 'testing'

- script: echo ${{ parameters.Repo_Var }}